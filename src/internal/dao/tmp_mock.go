// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\dao\tmp.go

// Package dao is a generated GoMock package.
package dao

import (
	entity "back/demo/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTmpTableDaoI is a mock of TmpTableDaoI interface.
type MockTmpTableDaoI struct {
	ctrl     *gomock.Controller
	recorder *MockTmpTableDaoIMockRecorder
}

// MockTmpTableDaoIMockRecorder is the mock recorder for MockTmpTableDaoI.
type MockTmpTableDaoIMockRecorder struct {
	mock *MockTmpTableDaoI
}

// NewMockTmpTableDaoI creates a new mock instance.
func NewMockTmpTableDaoI(ctrl *gomock.Controller) *MockTmpTableDaoI {
	mock := &MockTmpTableDaoI{ctrl: ctrl}
	mock.recorder = &MockTmpTableDaoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTmpTableDaoI) EXPECT() *MockTmpTableDaoIMockRecorder {
	return m.recorder
}

// Delay mocks base method.
func (m *MockTmpTableDaoI) Delay() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delay")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delay indicates an expected call of Delay.
func (mr *MockTmpTableDaoIMockRecorder) Delay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delay", reflect.TypeOf((*MockTmpTableDaoI)(nil).Delay))
}

// SelectByName mocks base method.
func (m *MockTmpTableDaoI) SelectByName(ctx context.Context, name string) ([]entity.TmpTable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByName", ctx, name)
	ret0, _ := ret[0].([]entity.TmpTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByName indicates an expected call of SelectByName.
func (mr *MockTmpTableDaoIMockRecorder) SelectByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByName", reflect.TypeOf((*MockTmpTableDaoI)(nil).SelectByName), ctx, name)
}
